name: Build + Docker Publish (GHCR)

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]    # build on semver tags too
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Image name (owner/name). Default: <owner>/iotmining-frontend'
        required: false
        type: string
      custom_tag:
        description: 'Optional extra tag (e.g., v1.0.0, staging, canary)'
        required: false
        type: string
      docker_context:
        description: 'Docker build context'
        default: '.'
        required: false
        type: string
      dockerfile:
        description: 'Path to Dockerfile'
        default: 'Dockerfile'
        required: false
        type: string
      platforms:
        description: 'Build platforms'
        default: 'linux/amd64,linux/arm64'
        required: false
        type: string
      build_args:
        description: 'Build args (KEY=VALUE lines)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/iotmining-frontend  # default
  # Node/CRA noise & audit off by default
  NPM_CONFIG_AUDIT: "false"
  NPM_CONFIG_FUND: "false"
  CI: "false"                           # prevents CRA from failing on warnings
  DISABLE_ESLINT_PLUGIN: "true"         # skip CRA eslint in CI builds

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

concurrency:
  group: docker-publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prep:
    name: Prep (tags & labels)
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.resolve.outputs.val }}
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      digest_name: ${{ steps.meta.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve image name
        id: resolve
        run: |
          if [ -n "${{ inputs.image_name }}" ]; then
            echo "val=${{ inputs.image_name }}" >> $GITHUB_OUTPUT
          else
            echo "val=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          fi

      - name: Docker metadata (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.resolve.outputs.val }}
          tags: |
            type=raw,value=sha-${{ github.sha }}
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=${{ inputs.custom_tag }},enable=${{ inputs.custom_tag != '' }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=iotmining-frontend

  node-ci:
    name: Node CI (lint • test • build)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps (no audit/fund)
        run: npm ci --no-audit --fund=false

      - name: Lint
        run: npm run lint --if-present

      - name: Test (ignore failures)
        run: npm test --if-present -- --ci --reporters=default || true
        env:
          CI: "false"

      - name: Build (CRA/Vite)
        run: npm run build
        env:
          CI: "false"
          DISABLE_ESLINT_PLUGIN: "true"
          VITE_API_BASE: ${{ vars.VITE_API_BASE }}
          VITE_BASE: ${{ vars.VITE_BASE }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      # Upload build output (useful for debugging or for separate static hosting)
      - name: Detect build dir
        id: outdir
        run: |
          if [ -d "dist" ]; then echo "dir=dist" >> $GITHUB_OUTPUT; \
          elif [ -d "build" ]; then echo "dir=build" >> $GITHUB_OUTPUT; \
          else echo "dir=" >> $GITHUB_OUTPUT; fi

      - name: Upload web artifact
        if: ${{ steps.outdir.outputs.dir != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: web-${{ github.sha }}
          path: ${{ steps.outdir.outputs.dir }}
          retention-days: 7

  docker-build:
    name: Docker Build & Push (multi‑arch)
    needs: [prep, node-ci]
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v4

      - name: QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Buildx
        uses: docker/setup-buildx-action@v3

      - name: GHCR login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Optional: show context for monorepos
      - name: List context
        run: |
          ls -la
          echo "Context: ${{ inputs.docker_context || '.' }}"
          echo "Dockerfile: ${{ inputs.dockerfile || 'Dockerfile' }}"

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.docker_context || '.' }}
          file: ${{ inputs.dockerfile || 'Dockerfile' }}
          push: true
          platforms: ${{ inputs.platforms || 'linux/amd64,linux/arm64' }}
          tags: ${{ needs.prep.outputs.tags }}
          labels: ${{ needs.prep.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_BASE=${{ vars.VITE_API_BASE }}
            VITE_BASE=${{ vars.VITE_BASE }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            CI=false
            DISABLE_ESLINT_PLUGIN=true
            NPM_CONFIG_AUDIT=false
            NPM_CONFIG_FUND=false
            ${{ inputs.build_args }}

  provenance:
    name: Attach Provenance (SLSA)
    needs: [docker-build, prep]
    runs-on: ubuntu-latest
    if: ${{ always() && needs.docker-build.result == 'success' }}
    steps:
      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ needs.prep.outputs.image_name }}
          # digest is auto detected from last push by this action (if available);
          # otherwise you can parse and pass one explicitly.
          push-to-registry: true
